{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","store","createStore","state","action","type","quotesArr","Math","floor","random","length","applyMiddleware","thunk","QuoteWrapper","props","refresh","bind","fetch","then","response","json","data","getNewQuote","quotes","this","id","actualQuote","quote","icon","faQuoteLeft","author","className","href","target","rel","faHashtag","onClick","faRedo","React","Component","ConnectedComp","connect","dispatch","refreshQuote","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCOAC,EAAQC,aARS,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC7C,OAAQA,EAAOC,MACb,IAJY,UAKZ,OAAOD,EAAOE,UAAUC,KAAKC,MAAMD,KAAKE,SAAWL,EAAOE,UAAUI,SACpE,QACA,OAAOP,KAG+BQ,YAAgBC,MAYpDC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACHX,MAAQ,GAEX,EAAKY,QAAU,EAAKA,QAAQC,KAAb,gBAJE,E,sDAQT,IAAD,OACNC,MAAM,0IACNC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKP,MAAMQ,YAAYD,EAAKE,a,0CAI9BC,KAAKT,Y,+BAIL,OACE,yBAAKU,GAAG,kBACN,yBAAKA,GAAG,WACN,2BAAKD,KAAKV,MAAMY,YAAYC,QAE9B,yBAAKF,GAAG,mBACN,yBAAKA,GAAG,aACN,kBAAC,IAAD,CAAiBA,GAAG,aAAaG,KAAMC,MACvC,yBAAKJ,GAAG,SACN,uBAAGA,GAAG,QAAQD,KAAKV,MAAMY,YAAYC,QAEvC,uBAAGF,GAAG,UAAN,KAAiD,MAA/BD,KAAKV,MAAMY,YAAYI,OAAa,UAAUN,KAAKV,MAAMY,YAAYI,QACvF,yBAAKL,GAAG,iBACN,uBAAGM,UAAU,SAASN,GAAG,cAAcO,KAAM,oEAAoER,KAAKV,MAAMY,YAAYC,MAAM,OAAOH,KAAKV,MAAMY,YAAYI,OAAO,mFAAoFG,OAAO,SAASC,IAAI,uBAAsB,kBAAC,IAAD,CAAiBN,KAAMO,MAAxU,kBACA,4BAAQJ,UAAU,SAASN,GAAG,YAAYW,QAAWZ,KAAKT,SAAS,kBAAC,IAAD,CAAiBa,KAAMS,MAA1F,iBAIN,yBAAKZ,GAAG,UACN,kDACA,sF,GAzCiBa,IAAMC,WAgE3BC,EAAgBC,aAdE,SAACtC,GACvB,MAAO,CACLuB,YAAavB,MAIU,SAACuC,GAC1B,MAAO,CACLpB,YAAa,SAAChB,GACZoC,EArEe,SAACpC,GACpB,MAAO,CACLD,KAdY,UAeZC,UAAWA,GAkEAqC,CAAarC,QAKNmC,CAA6C5B,GAGnE+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAU7C,MAAOA,GACf,kBAACuC,EAAD,QAGJO,SAASC,eAAe,SDqBpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.77dad5f3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { Provider, connect } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { faHashtag } from '@fortawesome/free-solid-svg-icons';\r\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\n//Redux\r\nconst REFRESH = 'REFRESH';\r\n\r\nconst refreshReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case REFRESH:\r\n    return action.quotesArr[Math.floor(Math.random() * action.quotesArr.length)]\r\n    default:\r\n    return state;\r\n  }\r\n};\r\nconst store = createStore(refreshReducer, applyMiddleware(thunk));\r\n\r\nconst refreshQuote = (quotesArr) => {\r\n  return {\r\n    type: REFRESH,\r\n    quotesArr: quotesArr\r\n\r\n  }\r\n};\r\n\r\n//React\r\n\r\nclass QuoteWrapper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\t\tthis.state = {\r\n\t\t}\r\n    this.refresh = this.refresh.bind(this);\r\n\r\n  }  \r\n\r\n\trefresh() {\r\n     fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      this.props.getNewQuote(data.quotes); \r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.refresh(); \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"main-container\">\r\n        <div id=\"bg-text\">\r\n          <p >{this.props.actualQuote.quote}</p>\r\n        </div>\r\n        <div id=\"quote-container\">\r\n          <div id=\"quote-box\">\r\n            <FontAwesomeIcon id=\"quote-mark\" icon={faQuoteLeft} />\r\n            <div id=\"quote\">\r\n              <p id=\"text\">{this.props.actualQuote.quote}</p>\r\n            </div>\r\n            <p id=\"author\">- {this.props.actualQuote.author==null?\"Unknown\":this.props.actualQuote.author}</p>\r\n            <div id=\"btn-container\">\r\n              <a className=\"button\" id=\"tweet-quote\" href={'https://twitter.com/intent/tweet?hashtags=ReactQuoteMachine&text='+this.props.actualQuote.quote+'%0D-'+this.props.actualQuote.author+'%0D%0DGet your own quote at https://flamendialis.github.io/random-quote-machine/'} target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={faHashtag} />   Tweet Quote</a>\r\n              <button className=\"button\" id=\"new-quote\" onClick = {this.refresh}><FontAwesomeIcon icon={faRedo} /> New Quote</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div id=\"footer\">\r\n          <p>React Quote Machine</p>\r\n          <p>Created by Félix Menéndez using React-Redux</p>\r\n        </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n//React-redux\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    actualQuote: state\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getNewQuote: (quotesArr) => {\r\n      dispatch(refreshQuote(quotesArr))\r\n    }\r\n  }\r\n};\r\n\r\nconst ConnectedComp = connect(mapStateToProps, mapDispatchToProps)(QuoteWrapper);\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ConnectedComp />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}